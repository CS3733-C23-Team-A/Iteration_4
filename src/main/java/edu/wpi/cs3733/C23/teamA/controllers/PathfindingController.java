package edu.wpi.cs3733.C23.teamA.controllers;

import edu.wpi.cs3733.C23.teamA.pathfinding.*;
import java.io.IOException;
import java.util.*;

public class PathfindingController {

  /**
   * @return a HashMap<String, Node> representing a graph, read from .csv files
   * @throws IOException
   */
  public static HashMap<String, Node> prepDFS() throws IOException {
    // create a graph to hold the L1 information
    HashMap<String, Node> graph = new HashMap<>();

    // add the L1 CSV information to the graph (TO BE UPDATED LATER)
    CSVReader.readNodes("src/main/resources/edu/wpi/cs3733/C23/teamA/mapCSV/L1Nodes.csv", graph);
    CSVReader.readEdges("src/main/resources/edu/wpi/cs3733/C23/teamA/mapCSV/L1Edges.csv", graph);

    return graph;
  }

  /**
   * @param graph a HashMap<String, Node> (normally) generated by prepDFS() from reading .csv files
   * @param startNodeID the ID of the node where the user wants to start from
   * @param endNodeID the ID of the node that the user wants to get to
   * @return whether there exists a path between startNode and endNode
   */
  public static ArrayList<Node> callDFS(
      HashMap<String, Node> graph, String startNodeID, String endNodeID) {
    return DFS.traverse(graph.get(startNodeID), graph.get(endNodeID));
  }

  /**
   * Prints the path specified by the parameter path. Prints each node with their ID and long name.
   * Implies that the path being given is not null or empty, and has at least two nodes.
   *
   * @param path An ArrayList which represents a path from the node in index zero to the node in the
   *     last index
   */
  public static void printPath(ArrayList<Node> path) {
    // get the first and last node names to print
    String startID = path.get(0).getNodeID();
    String endID = path.get(path.size() - 1).getNodeID();
    System.out.println("Path from " + startID + " to " + endID + ":");

    // loop through all of them to print the full path
    for (Node n : path) {
      System.out.print("Node ID: " + n.getNodeID());
      if (n.getLongName() != null) {
        System.out.println("; Long Name: " + n.getLongName());
      }
    }
  }
}
